generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleEnum {
  client
  admin
}

enum CardTypeEnum {
  physical
  virtual
}

enum TransactionTypeEnum {
  credit
  debit
}

model Users {
  id        String       @id @default(uuid())
  name      String
  document  String       @unique
  password  String
  role      UserRoleEnum @default(client)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  Accounts Accounts?

  @@map("users")
}

model Accounts {
  id        String   @id @default(uuid())
  branch    String
  account   String
  userId    String   @unique @map("userId")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        Users          @relation(fields: [userId], references: [id])
  Cards        Cards?
  transactions Transactions[]
  received     Transactions[] @relation("ReceivedTransactions")

  @@map("accounts")
}

model Cards {
  id        String       @id @default(uuid())
  type      CardTypeEnum
  number    String
  cvv       String
  accountId String       @unique @map("accountId")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  accounts Accounts @relation(fields: [accountId], references: [id])

  @@map("cards")
}

model Transactions {
  id                String              @id @default(uuid())
  value             Float
  description       String
  type              TransactionTypeEnum
  accountId         String
  receiverAccountId String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  accounts         Accounts  @relation(fields: [accountId], references: [id])
  receiverAccounts Accounts? @relation("ReceivedTransactions", fields: [receiverAccountId], references: [id])

  @@map("transactions")
}
